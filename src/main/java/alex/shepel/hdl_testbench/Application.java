package alex.shepel.hdl_testbench;

import alex.shepel.hdl_testbench.backend.Backend;
import alex.shepel.hdl_testbench.frontend.Frontend;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

/*
 * File: Application.java
 * -----------------------------------------------
 * Program that generate test environment
 * for the specified FPGA design file.
 * See the link below.
 *
 * TODO: Link to the help file.
 *       Also it can be great to use autogenerated
 *       java-doc.
 */
public class Application implements ActionListener {

    /* Main objects.
    Backend contains app's logic.
    Frontend contains app's GUI. */
    private static Frontend frontend;
    private static Backend backend;

    /**
     * The class constructor.
     */
    public Application() {
        /* Initializes Frontend object. */
        frontend = new Frontend();

        /* Adds action listeners
        to the control buttons of the app's window. */
        Frontend.getButtonsHashMap().get("< Back").addActionListener(this);
        Frontend.getButtonsHashMap().get("Next >").addActionListener(this);
        Frontend.getButtonsHashMap().get("Help").addActionListener(this);
        Frontend.getButtonsHashMap().get("Finish").addActionListener(this);

        /* Initializes Backend object. */
        try {
            backend = new Backend();
        }

        /* Shows error message on the app's window.
        In this case backend initialization is unsuccessful
        because some of internal files are absent or can't be read. */
        catch (IOException e) {
            e.printStackTrace();
            frontend.showExceptionMessage(e);
        }
    }

    /**
     * Implements the ActionListener interface.
     *
     * @param e The ActionEvent object.
     *          Contains an action
     *          that just happened
     *          on the app's window.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("< Back"))
            frontend.back();

        if (e.getActionCommand().equals("Next >"))
            if (doBackendAction()) frontend.next();

        if (e.getActionCommand().equals("Help"))
            frontend.help();

        if (e.getActionCommand().equals("Finish"))
            frontend.finish();
    }

    /**
     * -- Checks configuration page that is shown
     * on the app's window at the moment.
     * -- Runs backend actions that correspond to that page.
     * -- Catches exceptions and shows warning messages.
     *
     * @return If backend action is successful, returns true.
     *         Else return false.
     */
    private boolean doBackendAction() {
        try {
            switch (frontend.getPageName()) {
                case "Specify DUT file" -> backend.setDutFile(frontend.getDutFile());

                case "Specify working folder" -> {
                    backend.setWorkingFolder(frontend.getWorkingFolder());
                    frontend.setDutClocks(backend.getDutClocks());
                    frontend.refresh();
                }

                case "Specify clocks" -> backend.setClocksHashMap(frontend.getClocksHashMap());

                case "Specify sampling frequency" -> {
                    backend.setReportSamplingFrequency(frontend.getReportSamplingFrequency());
                    backend.generateEnvironment();
                }

                case "Run ModelSim" -> {
                    // TODO: implement following methods.
                    // backend.runScoreboard();
                    // frontend.putResults();
                }

                default -> { return false; }
            }

            return true;
        }

        catch (NullPointerException | IOException e) {
            frontend.showExceptionMessage(e);
            e.printStackTrace();
            return false;
        }
    }
}
